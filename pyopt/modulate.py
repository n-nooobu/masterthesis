import numpy as np
import pandas as pd
import pickle
import random
import matplotlib.pyplot as plt
from pyopt.util import load_pickle


def mseq(N, itr=0, save=False):
    MC = np.array([[5, 3, 2, 1, 0], [6, 5, 2, 1, 0], [7, 3, 2, 1, 0], [8, 7, 2, 1, 0],
                   [9, 7, 2, 1, 0], [10, 5, 2, 1, 0], [11, 4, 2, 1, 0], [12, 8, 2, 1, 0],
                   [13, 12, 8, 2, 0], [14, 3, 2, 1, 0], [15, 12, 3, 1, 0], [16, 12, 3, 1, 0], [17, 3, 2, 1, 0]])
    m = np.zeros((N, 2), dtype=int)
    m[:, 0] = np.ones(N, dtype=int)
    out = np.zeros(2 ** N, dtype=int)
    for i in range(2 ** N):
        b = i % 2
        a = (i + 1) % 2
        for k in range(N - 1):
            m[k, a] = m[k + 1, b]
        tmp = m[MC[N - 5, 1], b] + m[MC[N - 5, 2], b] + m[MC[N - 5, 3], b] + m[MC[N - 5, 4], b]
        m[N - 1, a] = tmp % 2
        out[i] = m[0, b]
    if itr:
        tmp = out
        for i in range(itr - 1):
            out = np.concatenate([out, tmp])
    if save:
        with open('dataset/Mseq_' + str(N) + '_' + str(itr) + '.pickle', 'wb') as f:
            pickle.dump(out, f)
    return out


def mseq2(N, save=False):
    MC = np.array([[5, 3, 2, 1, 0], [6, 5, 2, 1, 0], [7, 3, 2, 1, 0], [8, 7, 2, 1, 0],
                   [9, 7, 2, 1, 0], [10, 5, 2, 1, 0], [11, 4, 2, 1, 0], [12, 8, 2, 1, 0],
                   [13, 12, 8, 2, 0], [14, 3, 2, 1, 0], [15, 12, 3, 1, 0], [16, 12, 3, 1, 0], [17, 3, 2, 1, 0]])
    m = np.zeros((N, 2), dtype=int)
    m[:, 0] = np.ones(N, dtype=int)
    out = np.zeros(2 ** N + (N - 1), dtype=int)
    for i in range(2 ** N + (N - 1)):
        b = i % 2
        a = (i + 1) % 2
        for k in range(N - 1):
            m[k, a] = m[k + 1, b]
        tmp = m[MC[N - 5, 1], b] + m[MC[N - 5, 2], b] + m[MC[N - 5, 3], b] + m[MC[N - 5, 4], b]
        m[N - 1, a] = tmp % 2
        out[i] = m[0, b]
    if save:
        with open('dataset/Mseq_' + str(N) + '.pickle', 'wb') as f:
            pickle.dump(out, f)
    return out


def normal(N, itr=0):
    init_seq = mseq(N, itr)
    return init_seq


def wo(N):
    tmp = mseq(N)
    init_seq = np.zeros(2 ** N * N, dtype=int)
    for i in range(2 ** N):
        init_seq[i * N: (i + 1) * N] = tmp[i: i + N]

    return init_seq


def rwo(N):
    tmp = wo(N).reshape(2 ** N, N)
    init_seq = np.zeros_like(tmp, dtype=int)
    row = list(range(len(tmp)))
    random.shuffle(row)
    for i in range(len(tmp)):
        init_seq[i] = tmp[row[i]]
    init_seq = init_seq.reshape(2 ** N * N)

    return init_seq


def r(N):
    tmp = [random.randint(0, 1) for i in range(2 ** N * N)]
    init_seq = np.array(tmp)

    return init_seq


def eightb_tenb(N):
    eight_bit = ['00000000', '00000001', '00000010', '00000011', '00000100', '00000101', '00000110', '00000111',
                 '00001000', '00001001', '00001010', '00001011', '00001100', '00001101', '00001110', '00001111',
                 '00010000', '00010001', '00010010', '00010011', '00010100', '00010101', '00010110', '00010111',
                 '00011000', '00011001', '00011010', '00011011', '00011100', '00011101', '00011110', '00011111',
                 '00100000', '00100001', '00100010', '00100011', '00100100', '00100101', '00100110', '00100111',
                 '00101000', '00101001', '00101010', '00101011', '00101100', '00101101', '00101110', '00101111',
                 '00110000', '00110001', '00110010', '00110011', '00110100', '00110101', '00110110', '00110111',
                 '00111000', '00111001', '00111010', '00111011', '00111100', '00111101', '00111110', '00111111',
                 '01000000', '01000001', '01000010', '01000011', '01000100', '01000101', '01000110', '01000111',
                 '01001000', '01001001', '01001010', '01001011', '01001100', '01001101', '01001110', '01001111',
                 '01010000', '01010001', '01010010', '01010011', '01010100', '01010101', '01010110', '01010111',
                 '01011000', '01011001', '01011010', '01011011', '01011100', '01011101', '01011110', '01011111',
                 '01100000', '01100001', '01100010', '01100011', '01100100', '01100101', '01100110', '01100111',
                 '01101000', '01101001', '01101010', '01101011', '01101100', '01101101', '01101110', '01101111',
                 '01110000', '01110001', '01110010', '01110011', '01110100', '01110101', '01110110', '01110111',
                 '01111000', '01111001', '01111010', '01111011', '01111100', '01111101', '01111110', '01111111',
                 '10000000', '10000001', '10000010', '10000011', '10000100', '10000101', '10000110', '10000111',
                 '10001000', '10001001', '10001010', '10001011', '10001100', '10001101', '10001110', '10001111',
                 '10010000', '10010001', '10010010', '10010011', '10010100', '10010101', '10010110', '10010111',
                 '10011000', '10011001', '10011010', '10011011', '10011100', '10011101', '10011110', '10011111',
                 '10100000', '10100001', '10100010', '10100011', '10100100', '10100101', '10100110', '10100111',
                 '10101000', '10101001', '10101010', '10101011', '10101100', '10101101', '10101110', '10101111',
                 '10110000', '10110001', '10110010', '10110011', '10110100', '10110101', '10110110', '10110111',
                 '10111000', '10111001', '10111010', '10111011', '10111100', '10111101', '10111110', '10111111',
                 '11000000', '11000001', '11000010', '11000011', '11000100', '11000101', '11000110', '11000111',
                 '11001000', '11001001', '11001010', '11001011', '11001100', '11001101', '11001110', '11001111',
                 '11010000', '11010001', '11010010', '11010011', '11010100', '11010101', '11010110', '11010111',
                 '11011000', '11011001', '11011010', '11011011', '11011100', '11011101', '11011110', '11011111',
                 '11100000', '11100001', '11100010', '11100011', '11100100', '11100101', '11100110', '11100111',
                 '11101000', '11101001', '11101010', '11101011', '11101100', '11101101', '11101110', '11101111',
                 '11110000', '11110001', '11110010', '11110011', '11110100', '11110101', '11110110', '11110111',
                 '11111000', '11111001', '11111010', '11111011', '11111100', '11111101', '11111110', '11111111']

    RD_minus = ['1001110100', '0111010100', '1011010100', '1100011011', '1101010100', '1010011011', '0110011011', '1110001011',
                '1110010100', '1001011011', '0101011011', '1101001011', '0011011011', '1011001011', '0111001011', '0101110100',
                '0110110100', '1000111011', '0100111011', '1100101011', '0010111011', '1010101011', '0110101011', '1110100100',
                '1100110100', '1001101011', '0101101011', '1101100100', '0011101011', '1011100100', '0111100100', '1010110100',
                '1001111001', '0111011001', '1011011001', '1100011001', '1101011001', '1010011001', '0110011001', '1110001001',
                '1110011001', '1001011001', '0101011001', '1101001001', '0011011001', '1011001001', '0111001001', '0101111001',
                '0110111001', '1000111001', '0100111001', '1100101001', '0010111001', '1010101001', '0110101001', '1110101001',
                '1100111001', '1001101001', '0101101001', '1101101001', '0011101001', '1011101001', '0111101001', '1010111001',
                '1001110101', '0111010101', '1011010101', '1100010101', '1101010101', '1010010101', '0110010101', '1110000101',
                '1110010101', '1001010101', '0101010101', '1101000101', '0011010101', '1011000101', '0111000101', '0101110101',
                '0110110101', '1000110101', '0100110101', '1100100101', '0010110101', '1010100101', '0110100101', '1110100101',
                '1100110101', '1001100101', '0101100101', '1101100101', '0011100101', '1011100101', '0111100101', '1010110101',
                '1001110011', '0111010011', '1011010011', '1100011100', '1101010011', '1010011100', '0110011100', '1110001100',
                '1110010011', '1001011100', '0101011100', '1101001100', '0011011100', '1011001100', '0111001100', '0101110011',
                '0110110011', '1000111100', '0100111100', '1100101100', '0010111100', '1010101100', '0110101100', '1110100011',
                '1100110011', '1001101100', '0101101100', '1101100011', '0011101100', '1011100011', '0111100011', '1010110011',
                '1001110010', '0111010010', '1011010010', '1100011101', '1101010010', '1010011101', '0110011101', '1110001101',
                '1110010010', '1001011101', '0101011101', '1101001101', '0011011101', '1011001101', '0111001101', '0101110010',
                '0110110010', '1000111101', '0100111101', '1100101101', '0010111101', '1010101101', '0110101101', '1110100010',
                '1100110010', '1001101101', '0101101101', '1101100010', '0011101101', '1011100010', '0111100010', '1010110010',
                '1001111010', '0111011010', '1011011010', '1100011010', '1101011010', '1010011010', '0110011010', '1110001010',
                '1110011010', '1001011010', '0101011010', '1101001010', '0011011010', '1011001010', '0111001010', '0101111010',
                '0110111010', '1000111010', '0100111010', '1100101010', '0010111010', '1010101010', '0110101010', '1110101010',
                '1100111010', '1001101010', '0101101010', '1101101010', '0011101010', '1011101010', '0111101010', '1010111010',
                '1001110110', '0111010110', '1011010110', '1100010110', '1101010110', '1010010110', '0110010110', '1110000110',
                '1110010110', '1001010110', '0101010110', '1101000110', '0011010110', '1011000110', '0111000110', '0101110110',
                '0110110110', '1000110110', '0100110110', '1100100110', '0010110110', '1010100110', '0110100110', '1110100110',
                '1100110110', '1001100110', '0101100110', '1101100110', '0011100110', '1011100110', '0111100110', '1010110110',
                '1001110001', '0111010001', '0111010001', '0111010001', '0111010001', '0111010001', '0111010001', '0111010001',
                '1110010001', '1001011110', '0101011110', '1101001110', '0011011110', '1011001110', '0111001110', '0101110001',
                '0110110001', '1000110111', '0100110111', '1100101110', '0010110111', '1010101110', '0110101110', '1110100001',
                '1100110001', '1001101110', '0101101110', '1101100001', '0011101110', '1011100001', '0111100001', '1010110001']

    RD_plus = ['0110001011', '1000101011', '0100101011', '1100010100', '0010101011', '1010010100', '0110010100', '0001110100',
               '0001101011', '1001010100', '0101010100', '1101000100', '0011010100', '1011000100', '0111000100', '1010001011',
               '1001001011', '1000110100', '0100110100', '1100100100', '0010110100', '1010100100', '0110100100', '0001011011',
               '0011001011', '1001100100', '0101100100', '0010011011', '0011100100', '0100011011', '1000011011', '0101001011',
               '0110001001', '1000101001', '0100101001', '1100011001', '0010101001', '1010011001', '0110011001', '0001111001',
               '0001101001', '1001011001', '0101011001', '1101001001', '0011011001', '1011001001', '0111001001', '1010001001',
               '1001001001', '1000111001', '0100111001', '1100101001', '0010111001', '1010101001', '0110101001', '0001011001',
               '0011001001', '1001101001', '0101101001', '0010011001', '0011101001', '0100011001', '1000011001', '0101001001',
               '0110000101', '1000100101', '0100100101', '1100010101', '0010100101', '1010010101', '0110010101', '0001110101',
               '0001100101', '1001010101', '0101010101', '1101000101', '0011010101', '1011000101', '0111000101', '1010000101',
               '1001000101', '1000110101', '0100110101', '1100100101', '0010110101', '1010100101', '0110100101', '0001010101',
               '0011000101', '1001100101', '0101100101', '0010010101', '0011100101', '0100010101', '1000010101', '0101000101',
               '0110001100', '1000101100', '0100101100', '1100010011', '0010101100', '1010010011', '0110010011', '0001110011',
               '0001101100', '1001010011', '0101010011', '1101000011', '0011010011', '1011000011', '0111000011', '1010001100',
               '1001001100', '1000110011', '0100110011', '1100100011', '0010110011', '1010100011', '0110100011', '0001011100',
               '0011001100', '1001100011', '0101100011', '0010011100', '0011100011', '0100011100', '1000011100', '0101001100',
               '0110001101', '1000101101', '0100101101', '1100010010', '0010101101', '1010010010', '0110010010', '0001110010',
               '0001101101', '1001010010', '0101010010', '1101000010', '0011010010', '1011000010', '0111000010', '1010001101',
               '1001001101', '1000110010', '0100110010', '1100100010', '0010110010', '1010100010', '0110100010', '0001011101',
               '0011001101', '1001100010', '0101100010', '0010011101', '0011100010', '0100011101', '1000011101', '0101001101',
               '0110001010', '1000101010', '0100101010', '1100011010', '0010101010', '1010011010', '0110011010', '0001111010',
               '0001101010', '1001011010', '0101011010', '1101001010', '0011011010', '1011001010', '0111001010', '1010001010',
               '1001001010', '1000111010', '0100111010', '1100101010', '0010111010', '1010101010', '0110101010', '0001011010',
               '0011001010', '1001101010', '0101101010', '0010011010', '0011101010', '0100011010', '1000011010', '0101001010',
               '0110000110', '1000100110', '0100100110', '1100010110', '0010100110', '1010010110', '0110010110', '0001110110',
               '0001100110', '1001010110', '0101010110', '1101000110', '0011010110', '1011000110', '0111000110', '1010000110',
               '1001000110', '1000110110', '0100110110', '1100100110', '0010110110', '1010100110', '0110100110', '0001010110',
               '0011000110', '1001100110', '0101100110', '0010010110', '0011100110', '0100010110', '1000010110', '0101000110',
               '0110001110', '1000101110', '0100101110', '1100010001', '0010101110', '1010010001', '0110010001', '0001110001',
               '0001101110', '1001010001', '0101010001', '1101001000', '0011010001', '1011001000', '0111001000', '1010001110',
               '1001001110', '1000110001', '0100110001', '1100100001', '0010110001', '1010100001', '0110100001', '0001011110',
               '0011001110', '1001100001', '0101100001', '0010011110', '0011100001', '0100011110', '1000011110', '0101001110']

    table = pd.DataFrame({'8bit': eight_bit,
                          'current RD-': RD_minus,
                          'current RD+': RD_plus
                          })

    RD_count = np.zeros(len(table), dtype=int).tolist()
    for i in range(len(table)):
        if table['current RD-'][i].count('1') == 5:
            RD_count[i] = 1

    table['count'] = RD_count

    def add_signal(seq, signal, i):
        for k in range(len(seq)):
            signal[i, k] = seq[k]

    row = list(range(len(table)))
    random.shuffle(row)
    RD = '-'
    signal = np.zeros((len(table), 10), dtype=int)
    for i in range(len(table)):
        if RD == '-':
            add_signal(table['current RD-'][row[i]], signal, i)
            if table['count'][row[i]] == 0:
                RD = '+'
        elif RD == '+':
            add_signal(table['current RD+'][row[i]], signal, i)
            if table['count'][row[i]] == 0:
                RD = '-'

    init_seq = signal.reshape(-1)

    return init_seq


def eightb_tenb_2(N):
    init_seqs = load_pickle('dataset/init_seqs_8b10b.pickle')
    init_seqs_new = np.zeros((len(init_seqs), 20), dtype=int)
    row = list(range(len(init_seqs)))
    random.shuffle(row)
    for i in range(len(init_seqs)):
        init_seqs_new[i] = init_seqs[row[i]]
    init_seq = init_seqs_new.reshape(-1)

    return init_seq


def nrzqpsk(init_seq, n):
    symbol_num = int(len(init_seq) / 2)
    tmp = init_seq
    data = np.zeros(symbol_num * n, dtype=complex)
    for i in range(symbol_num):
        if tmp[i * 2] == 1 and tmp[i * 2 + 1] == 1:
            Q = np.pi / 4
        elif tmp[i * 2] == 0 and tmp[i * 2 + 1] == 1:
            Q = np.pi * 3 / 4
        elif tmp[i * 2] == 0 and tmp[i * 2 + 1] == 0:
            Q = -np.pi * 3 / 4
        else:
            Q = -np.pi / 4
        data[i * n: i * n + n] = np.exp(1j * Q)  # * Phi_p

    return data


def rzqpsk(init_seq, n):
    symbol_num = int(len(init_seq) / 2)
    tmp = (init_seq - 0.5) * 2
    tmp_i = tmp[::2]
    tmp_q = tmp[1::2]
    data_i = np.zeros(symbol_num * n, dtype=float)
    data_q = np.zeros(symbol_num * n, dtype=float)
    for i in range(symbol_num):
        for j in range(n):
            data_i[i * n + j] = tmp_i[i] * np.sin(np.pi * j / n)
            data_q[i * n + j] = tmp_q[i] * np.sin(np.pi * j / n)
    data = (data_i + 1j * data_q)# * np.sqrt(1 / 2)  # * Phi_p

    return data


def nrzsixteenqam(init_seq, n):
    symbol_num = int(len(init_seq) / 4)
    tmp = init_seq
    amp = 1 / np.sqrt(10)
    data = np.zeros(symbol_num * n, dtype=complex)
    for i in range(symbol_num):
        if tmp[i * 4] == 0:
            sig_i = -1
        else:
            sig_i = 1
        if tmp[i * 4 + 1] == 0:
            amp_i = 3 * amp
        else:
            amp_i = 1 * amp
        if tmp[i * 4 + 2] == 0:
            sig_q = 1
        else:
            sig_q = -1
        if tmp[i * 4 + 3] == 0:
            amp_q = 3 * amp
        else:
            amp_q = 1 * amp
        data[i * n: i * n + n] = sig_i * amp_i + 1j * sig_q * amp_q  # * Phi_p

    return data


def rzsixteenqam(init_seq, n):
    symbol_num = int(len(init_seq) / 4)
    tmp = init_seq
    amp = 1 / np.sqrt(10)
    data = np.zeros(symbol_num * n, dtype=complex)
    for i in range(symbol_num):
        if tmp[i * 4] == 0:
            sig_i = -1
        else:
            sig_i = 1
        if tmp[i * 4 + 1] == 0:
            amp_i = 3 * amp
        else:
            amp_i = 1 * amp
        if tmp[i * 4 + 2] == 0:
            sig_q = 1
        else:
            sig_q = -1
        if tmp[i * 4 + 3] == 0:
            amp_q = 3 * amp
        else:
            amp_q = 1 * amp
        for j in range(n):
            data[i * n + j] = (sig_i * amp_i * np.sin(np.pi * j / n) + 1j * sig_q * amp_q * np.sin(np.pi * j / n)) * np.sqrt(2)

    return data


def modulate(type='Normal', form='RZ16QAM', init_seq=None, N=11, n=32, itr=0):
    mod_type = {'Normal': normal,
                'WO': wo,
                'RWO': rwo,
                'R': r,
                '8b10b': eightb_tenb}

    mod_form = {'NRZQPSK': nrzqpsk,
                'RZQPSK': rzqpsk,
                'NRZ16QAM': nrzsixteenqam,
                'RZ16QAM': rzsixteenqam}

    if init_seq is None:
        init_seq = mod_type[type](N, itr)
        data = mod_form[form](init_seq, n)
    else:
        data = mod_form[form](init_seq, n)

    return init_seq, data


def modulate_multi(form, init_seqs, n):
    mod_form = {'NRZQPSK': nrzqpsk,
                'RZQPSK': rzqpsk,
                'NRZ16QAM': nrzsixteenqam,
                'RZ16QAM': rzsixteenqam}

    shape_form = {'NRZQPSK': int(len(init_seqs[0]) * n / 2),
                  'RZQPSK': int(len(init_seqs[0]) * n / 2),
                  'NRZ16QAM': int(len(init_seqs[0]) * n / 4),
                  'RZ16QAM': int(len(init_seqs[0]) * n / 4)}

    data = np.zeros((len(init_seqs), shape_form[form]), dtype=complex)
    init_seq = init_seqs.reshape(-1).copy()
    data = mod_form[form](init_seq, n)
    data = data.reshape((len(init_seqs), -1))

    return data


if __name__ == '__main__':

    """検証用関数"""
    def check_wo(N, mseq, init_seq):
        init_seq = init_seq.copy()
        for i in range(2 ** N):
            init_seq[i * N: (i + 1) * N] -= mseq[i: i + N]
        if init_seq.sum() == 0:
            print('\033[32m' + ':) Function is correct.' + '\033[0m')
        else:
            print('\033[31m' + ':( Function is wrong.' + '\033[0m')

    def check_rwo(N, mseq, init_seq):
        init_seq = init_seq.copy()
        for i in range(2 ** N):
            for j in range(2 ** N):
                if np.all(init_seq[i * N: (i + 1) * N] == mseq[j: j + N]):
                    init_seq[i * N: (i + 1) * N] -= mseq[j: j + N]
                    break
        if init_seq.sum() == 0:
            print('\033[32m' + ':) Function is correct.' + '\033[0m')
        else:
            print('\033[31m' + ':( Function is wrong.' + '\033[0m')


    def check_qpsk(init_seq, qpsk, n):
        init_seq_i = init_seq[::2] - 0.5
        init_seq_q = init_seq[1::2] - 0.5
        qpsk_i = qpsk.real[int(n / 2):: n]
        qpsk_q = qpsk.imag[int(n / 2):: n]
        if np.all(np.sign(init_seq_i) == np.sign(qpsk_i))\
                and np.all(np.sign(init_seq_q) == np.sign(qpsk_q)):
            print('\033[32m' + ':) Function is correct.' + '\033[0m')
        else:
            print('\033[31m' + ':( Function is wrong.' + '\033[0m')


    def compare_nrz_and_rz(nrz, rz, n):
        nrz_i = nrz.real
        rz_i = rz.real
        x_axis = np.arange(len(nrz_i))

        fig = plt.figure()
        ax = fig.add_subplot()
        ax.plot(x_axis, nrz_i, label='nrz')
        ax.plot(x_axis, rz_i, label='rz')
        ax.legend()
        ax.set_xlim((9 * n, 20 * n))
        ax.xaxis.set_tick_params(direction='in')
        ax.yaxis.set_tick_params(direction='in')
        plt.show()


    def check_modulate_multi(init_seqs):
        nrz = modulate_multi('NRZ16QAM', init_seqs, 32)
        rz = modulate_multi('RZ16QAM', init_seqs, 32)
        x_axis = np.arange(len(nrz[0]))

        fig = plt.figure()
        ax = fig.add_subplot()
        ax.plot(x_axis, nrz[0].real, label='nrz')
        ax.plot(x_axis, rz[0].real, label='rz')
        ax.legend()
        ax.xaxis.set_tick_params(direction='in')
        ax.yaxis.set_tick_params(direction='in')
        plt.show()


    """
    m_seq = mseq(7)
    init_seqWO = wo(7)
    init_seqRWO = rwo(7)

    check_wo(7, m_seq, init_seqWO)
    check_rwo(7, m_seq, init_seqRWO)

    nrzqpskWO = nrzqpsk(init_seqWO, 32)
    rzqpskWO = rzqpsk(init_seqWO, 32)
    nrzsixteenqamWO = nrzsixteenqam(init_seqWO, 32)
    rzsixteenqamWO = rzsixteenqam(init_seqWO, 32)

    check_qpsk(init_seqWO, nrzqpskWO, 32)
    check_qpsk(init_seqWO, rzqpskWO, 32)

    compare_nrz_and_rz(nrzsixteenqamWO, rzsixteenqamWO, 32)
    """
    """
    from pyopt.util import load_pickle

    init_seqs = load_pickle('../dataset/init_seqs_8b10b.pickle')
    rz = modulate_multi('RZ16QAM', init_seqs, 32)
    check_modulate_multi(init_seqs)
    """

    # init_seq = eightb_tenb(1)
    m_seq = mseq(7, 3)
